/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ErrorImport } from './routes/error'
import { Route as RootIndexImport } from './routes/root/index'
import { Route as PagesRegisterIndexImport } from './routes/pages/register/index'
import { Route as PagesLoginIndexImport } from './routes/pages/login/index'
import { Route as PagesIndexIndexImport } from './routes/pages/index/index'

// Create/Update Routes

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const RootIndexRoute = RootIndexImport.update({
  id: '/root/',
  path: '/root/',
  getParentRoute: () => rootRoute,
} as any)

const PagesRegisterIndexRoute = PagesRegisterIndexImport.update({
  id: '/pages/register/',
  path: '/pages/register/',
  getParentRoute: () => rootRoute,
} as any)

const PagesLoginIndexRoute = PagesLoginIndexImport.update({
  id: '/pages/login/',
  path: '/pages/login/',
  getParentRoute: () => rootRoute,
} as any)

const PagesIndexIndexRoute = PagesIndexIndexImport.update({
  id: '/pages/index/',
  path: '/pages/index/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/root/': {
      id: '/root/'
      path: '/root'
      fullPath: '/root'
      preLoaderRoute: typeof RootIndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/index/': {
      id: '/pages/index/'
      path: '/pages/index'
      fullPath: '/pages/index'
      preLoaderRoute: typeof PagesIndexIndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/login/': {
      id: '/pages/login/'
      path: '/pages/login'
      fullPath: '/pages/login'
      preLoaderRoute: typeof PagesLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/register/': {
      id: '/pages/register/'
      path: '/pages/register'
      fullPath: '/pages/register'
      preLoaderRoute: typeof PagesRegisterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/error': typeof ErrorRoute
  '/root': typeof RootIndexRoute
  '/pages/index': typeof PagesIndexIndexRoute
  '/pages/login': typeof PagesLoginIndexRoute
  '/pages/register': typeof PagesRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/error': typeof ErrorRoute
  '/root': typeof RootIndexRoute
  '/pages/index': typeof PagesIndexIndexRoute
  '/pages/login': typeof PagesLoginIndexRoute
  '/pages/register': typeof PagesRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/error': typeof ErrorRoute
  '/root/': typeof RootIndexRoute
  '/pages/index/': typeof PagesIndexIndexRoute
  '/pages/login/': typeof PagesLoginIndexRoute
  '/pages/register/': typeof PagesRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/error'
    | '/root'
    | '/pages/index'
    | '/pages/login'
    | '/pages/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/error' | '/root' | '/pages/index' | '/pages/login' | '/pages/register'
  id:
    | '__root__'
    | '/error'
    | '/root/'
    | '/pages/index/'
    | '/pages/login/'
    | '/pages/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ErrorRoute: typeof ErrorRoute
  RootIndexRoute: typeof RootIndexRoute
  PagesIndexIndexRoute: typeof PagesIndexIndexRoute
  PagesLoginIndexRoute: typeof PagesLoginIndexRoute
  PagesRegisterIndexRoute: typeof PagesRegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  ErrorRoute: ErrorRoute,
  RootIndexRoute: RootIndexRoute,
  PagesIndexIndexRoute: PagesIndexIndexRoute,
  PagesLoginIndexRoute: PagesLoginIndexRoute,
  PagesRegisterIndexRoute: PagesRegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/error",
        "/root/",
        "/pages/index/",
        "/pages/login/",
        "/pages/register/"
      ]
    },
    "/error": {
      "filePath": "error.tsx"
    },
    "/root/": {
      "filePath": "root/index.tsx"
    },
    "/pages/index/": {
      "filePath": "pages/index/index.ts"
    },
    "/pages/login/": {
      "filePath": "pages/login/index.ts"
    },
    "/pages/register/": {
      "filePath": "pages/register/index.ts"
    }
  }
}
ROUTE_MANIFEST_END */
